!function(){"use strict";angular.module("gitApiConfig",[]).config(["$routeProvider",function(t){t.when("/",{controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{templateUrl:"template/nav.html"}).otherwise({temlpate:"<h1> NO page here<h1>"})}])}(),function(){"use strict";angular.module("gitApiCtrl",[]).controller("NavigateCtrl",["$scope","getListIssues","$routeParams",function(t,e,r){e.query(r.org,r.repo).then(function(e){t.issues=angular.copy(e)}),t.issuesItem=function(){t.number=r.number,t.org=r.org,t.repo=r.repo;var e=t.issues.filter(function(e){return e.number==t.number});e.length&&(t.issue=e[0])}}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(t,e,r){""===e.$$path&&(t.startPage=!0),t.searchRepo=function(){r.query(t.org,t.repo).then(function(e){t.data=angular.copy(e)}),t.startPage=!1,e.path("/"+t.org+"/"+t.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(t,e,r){void 0!==r.number&&(t.query(r.org,r.repo,r.number).then(function(t){e.comments=angular.copy(t),console.log("if work 1",e.issues);var n=e.issues.filter(function(t){return t.number==r.number});n.length&&(e.issue=n[0],console.log("if work",e.issue))}),console.log("if work 2",e.issues))}])}(),function(){"use strict";angular.module("gitDerective",[]).directive("issues",function(){return{controller:"NavigateCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http",function(t){return{query:function(e,r){var n="https://api.github.com/repos/"+e+"/"+r+"/issues";return t.get(n).then(function(t){var e=angular.copy(t.data);return e})}}}]),angular.module("gitApi").factory("getListComments",["$http",function(t){return{query:function(e,r,n){var o="https://api.github.com/repos/"+e+"/"+r+"/issues/"+n+"/comments";return t.get(o).then(function(t){var e=angular.copy(t.data);return e})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","ngResource","gitDerective","gitApiConfig","gitApiCtrl","gitFactory"])}(),function(){"use strict";angular.module("gitApiConfig",[]).config(["$routeProvider",function(t){t.when("/",{controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{templateUrl:"template/nav.html"}).otherwise({temlpate:"<h1> NO page here<h1>"})}])}(),function(){"use strict";angular.module("gitApiCtrl",[]).controller("NavigateCtrl",["$scope","getListIssues","$routeParams",function(t,e,r){e.query(r.org,r.repo).then(function(e){t.issues=angular.copy(e)}),t.issuesItem=function(){t.number=r.number,t.org=r.org,t.repo=r.repo;var e=t.issues.filter(function(e){return e.number==t.number});e.length&&(t.issue=e[0])}}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(t,e,r){""===e.$$path&&(t.startPage=!0),t.searchRepo=function(){r.query(t.org,t.repo).then(function(e){t.data=angular.copy(e)}),t.startPage=!1,e.path("/"+t.org+"/"+t.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(t,e,r){void 0!==r.number&&(t.query(r.org,r.repo,r.number).then(function(t){e.comments=angular.copy(t),console.log("if work 1",e.issues);var n=e.issues.filter(function(t){return t.number==r.number});n.length&&(e.issue=n[0],console.log("if work",e.issue))}),console.log("if work 2",e.issues))}])}(),function(){"use strict";angular.module("gitDerective",[]).directive("issues",function(){return{controller:"NavigateCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http",function(t){return{query:function(e,r){var n="https://api.github.com/repos/"+e+"/"+r+"/issues";return t.get(n).then(function(t){var e=angular.copy(t.data);return e})}}}]),angular.module("gitApi").factory("getListComments",["$http",function(t){return{query:function(e,r,n){var o="https://api.github.com/repos/"+e+"/"+r+"/issues/"+n+"/comments";return t.get(o).then(function(t){var e=angular.copy(t.data);return e})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","ngResource","gitDerective","gitApiConfig","gitApiCtrl","gitFactory"])}(),function(){"use strict";angular.module("gitApiConfig",[]).config(["$routeProvider",function(t){t.when("/",{controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{templateUrl:"template/nav.html"}).otherwise({temlpate:"<h1> NO page here<h1>"})}])}(),function(){"use strict";angular.module("gitApiCtrl",[]).controller("NavigateCtrl",["$scope","getListIssues","$routeParams",function(t,e,r){e.query(r.org,r.repo).then(function(e){t.issues=angular.copy(e)}),t.issuesItem=function(){t.number=r.number,t.org=r.org,t.repo=r.repo;var e=t.issues.filter(function(e){return e.number==t.number});e.length&&(t.issue=e[0])}}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(t,e,r){""===e.$$path&&(t.startPage=!0),t.searchRepo=function(){r.query(t.org,t.repo).then(function(e){t.data=angular.copy(e)}),t.startPage=!1,e.path("/"+t.org+"/"+t.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(t,e,r){void 0!==r.number&&(t.query(r.org,r.repo,r.number).then(function(t){e.comments=angular.copy(t),console.log("if work 1",e.issues);var n=e.issues.filter(function(t){return t.number==r.number});n.length&&(e.issue=n[0],console.log("if work",e.issue))}),console.log("if work 2",e.issues))}])}(),function(){"use strict";angular.module("gitDerective",[]).directive("issues",function(){return{controller:"NavigateCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http",function(t){return{query:function(e,r){var n="https://api.github.com/repos/"+e+"/"+r+"/issues";return t.get(n).then(function(t){var e=angular.copy(t.data);return e})}}}]).factory("getListComments",["$http",function(t){return{query:function(e,r,n){var o="https://api.github.com/repos/"+e+"/"+r+"/issues/"+n+"/comments";return t.get(o).then(function(t){var e=angular.copy(t.data);return e})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","ngResource","gitDerective","gitApiConfig","gitApiCtrl","gitFactory"])}();
//# sourceMappingURL=data:application/json;base64,
;
(function() {
  'use strict';
  // navigation controller
  angular.module('gitApiCtrl', ['gitFactory'])
    .controller('NavigateCtrl', ["$scope", "getListIssues", "$routeParams", function($scope, getListIssues, $routeParams) {
      getListIssues.query($routeParams.org, $routeParams.repo).then(function(data) {
        $scope.issues = angular.copy(data);
      });
      $scope.issuesItem = function() {
        $scope.number = $routeParams.number;
        $scope.org = $routeParams.org;
        $scope.repo = $routeParams.repo;
        var issue = $scope.issues.filter(function(item) {
          return item.number == $scope.number;
        });
        if (!issue.length) return;
        $scope.issue = issue[0];
      };
    }])

  // repo and org controller search
  .controller('SearchRepoCtrl', ["$scope", "$location", "getListIssues", function($scope, $location, getListIssues) {
    if ($location.$$path === '') {
      $scope.startPage = true;
    }
    $scope.searchRepo = function() {
      getListIssues.query($scope.org, $scope.repo).then(function(data) {
        $scope.data = angular.copy(data);
      });
      $scope.startPage = false;
      $location.path('/' + $scope.org + '/' + $scope.repo + '/issues');
    };
  }])

  //show comments controller
  .controller('CommentsCtrl', ["getListComments", "$scope", "$routeParams", function(getListComments, $scope, $routeParams) {
    if ($routeParams.number !== undefined) {
      getListComments.query($routeParams.org, $routeParams.repo, $routeParams.number).then(function(data) {
        $scope.comments = angular.copy(data);
        console.log('if work 1', $scope.issues);
        var issue = $scope.issues.filter(function(item) {
          return item.number == $routeParams.number;
        });
        // console.log('if work', $scope);

        if (!issue.length) return;
        $scope.issue = issue[0];
        console.log('if work', $scope.issue);
      });
      console.log('if work 2', $scope.issues);

    }
  }]);
})();

;
(function() {
  'use strict';
  // directive  show  1 issue
  angular.module('gitDerective', ['gitApiCtrl'])
    .directive('issues', function() {
      return {
        controller: 'NavigateCtrl',
        restrict: 'E',
        templateUrl: 'template/showIssues.html'
      };
    })
    // directive show all comments
    .directive('comments', function() {
      return {
        controller: 'CommentsCtrl',
        restrict: 'E',
        templateUrl: 'template/comments.html'
      };
    })
    .directive('pages', function() {
      // Runs during compile
      return {
        // name: '',
        // priority: 1,
        // terminal: true,
        // scope: {}, // {} = isolate, true = child, false/undefined = no change
        // controller: function($scope, $element, $attrs, $transclude) {},
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        // template: '',
        templateUrl: 'templatte/pages.html'
          // replace: true,
          // transclude: true,
          // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
      };
    });
})();

;
(function() {
  'use strict';
  angular.module('gitFactory', [])
    .factory('getListIssues', ["$http", function($http) {
      return {
        query: function(org, repo) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }])
    // factory get comments list from git hub
    .factory('getListComments', ["$http", function($http) {
      return {
        query: function(org, repo, number) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues' + '/' + number + '/' + 'comments';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }]);
})();

/* angular Global*/
;
(function() {
  'use strict';
  angular.module('gitApi', ['ngRoute', 'ngResource', 'gitDerective', 'gitApiConfig', 'gitApiCtrl', 'gitFactory']);
  //controllers

  //directives

  // config
  angular.module('gitApi')
    .config(['$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/', {
            controller: 'SearchRepoCtrl'
          })
          .when('/:org/:repo/issues/', {
            // controller: 'NavigateCtrl',
            templateUrl: 'template/nav.html'
          })
          .when('/:org/:repo/issues/:number', {
            // controller: 'CommentsCtrl',
            templateUrl: 'template/nav.html'
          })
          .otherwise({
            temlpate: '<h1> NO page here<h1>'
          });
      }
    ]);
  // factory
})();
// curl https: //api.github.com/repos/codeception/codeception/issues\?page\=5

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzLmpzIiwiZGlyZWN0aXZlLmpzIiwiZmFjdG9yeS5qcyIsImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsQ0FBQyxXQUFXO0VBQ1Y7O0VBRUEsUUFBUSxPQUFPLGNBQWMsQ0FBQztLQUMzQixXQUFXLDREQUFnQixTQUFTLFFBQVEsZUFBZSxjQUFjO01BQ3hFLGNBQWMsTUFBTSxhQUFhLEtBQUssYUFBYSxNQUFNLEtBQUssU0FBUyxNQUFNO1FBQzNFLE9BQU8sU0FBUyxRQUFRLEtBQUs7O01BRS9CLE9BQU8sYUFBYSxXQUFXO1FBQzdCLE9BQU8sU0FBUyxhQUFhO1FBQzdCLE9BQU8sTUFBTSxhQUFhO1FBQzFCLE9BQU8sT0FBTyxhQUFhO1FBQzNCLElBQUksUUFBUSxPQUFPLE9BQU8sT0FBTyxTQUFTLE1BQU07VUFDOUMsT0FBTyxLQUFLLFVBQVUsT0FBTzs7UUFFL0IsSUFBSSxDQUFDLE1BQU0sUUFBUTtRQUNuQixPQUFPLFFBQVEsTUFBTTs7Ozs7R0FLMUIsV0FBVywyREFBa0IsU0FBUyxRQUFRLFdBQVcsZUFBZTtJQUN2RSxJQUFJLFVBQVUsV0FBVyxJQUFJO01BQzNCLE9BQU8sWUFBWTs7SUFFckIsT0FBTyxhQUFhLFdBQVc7TUFDN0IsY0FBYyxNQUFNLE9BQU8sS0FBSyxPQUFPLE1BQU0sS0FBSyxTQUFTLE1BQU07UUFDL0QsT0FBTyxPQUFPLFFBQVEsS0FBSzs7TUFFN0IsT0FBTyxZQUFZO01BQ25CLFVBQVUsS0FBSyxNQUFNLE9BQU8sTUFBTSxNQUFNLE9BQU8sT0FBTzs7Ozs7R0FLekQsV0FBVyw4REFBZ0IsU0FBUyxpQkFBaUIsUUFBUSxjQUFjO0lBQzFFLElBQUksYUFBYSxXQUFXLFdBQVc7TUFDckMsZ0JBQWdCLE1BQU0sYUFBYSxLQUFLLGFBQWEsTUFBTSxhQUFhLFFBQVEsS0FBSyxTQUFTLE1BQU07UUFDbEcsT0FBTyxXQUFXLFFBQVEsS0FBSztRQUMvQixRQUFRLElBQUksYUFBYSxPQUFPO1FBQ2hDLElBQUksUUFBUSxPQUFPLE9BQU8sT0FBTyxTQUFTLE1BQU07VUFDOUMsT0FBTyxLQUFLLFVBQVUsYUFBYTs7OztRQUlyQyxJQUFJLENBQUMsTUFBTSxRQUFRO1FBQ25CLE9BQU8sUUFBUSxNQUFNO1FBQ3JCLFFBQVEsSUFBSSxXQUFXLE9BQU87O01BRWhDLFFBQVEsSUFBSSxhQUFhLE9BQU87Ozs7O0FBS3RDO0FDdkRBO0FBQ0EsQ0FBQyxXQUFXO0VBQ1Y7O0VBRUEsUUFBUSxPQUFPLGdCQUFnQixDQUFDO0tBQzdCLFVBQVUsVUFBVSxXQUFXO01BQzlCLE9BQU87UUFDTCxZQUFZO1FBQ1osVUFBVTtRQUNWLGFBQWE7Ozs7S0FJaEIsVUFBVSxZQUFZLFdBQVc7TUFDaEMsT0FBTztRQUNMLFlBQVk7UUFDWixVQUFVO1FBQ1YsYUFBYTs7O0tBR2hCLFVBQVUsU0FBUyxXQUFXOztNQUU3QixPQUFPOzs7Ozs7O1FBT0wsVUFBVTs7UUFFVixhQUFhOzs7Ozs7O0FBT3JCO0FDdENBO0FBQ0EsQ0FBQyxXQUFXO0VBQ1Y7RUFDQSxRQUFRLE9BQU8sY0FBYztLQUMxQixRQUFRLDJCQUFpQixTQUFTLE9BQU87TUFDeEMsT0FBTztRQUNMLE9BQU8sU0FBUyxLQUFLLE1BQU07VUFDekIsSUFBSSxNQUFNLGtDQUFrQyxNQUFNLE1BQU0sT0FBTztVQUMvRCxPQUFPLE1BQU0sSUFBSSxLQUFLLEtBQUssU0FBUyxLQUFLO1lBQ3ZDLElBQUksT0FBTyxRQUFRLEtBQUssSUFBSTtZQUM1QixPQUFPOzs7Ozs7S0FNZCxRQUFRLDZCQUFtQixTQUFTLE9BQU87TUFDMUMsT0FBTztRQUNMLE9BQU8sU0FBUyxLQUFLLE1BQU0sUUFBUTtVQUNqQyxJQUFJLE1BQU0sa0NBQWtDLE1BQU0sTUFBTSxPQUFPLFlBQVksTUFBTSxTQUFTLE1BQU07VUFDaEcsT0FBTyxNQUFNLElBQUksS0FBSyxLQUFLLFNBQVMsS0FBSztZQUN2QyxJQUFJLE9BQU8sUUFBUSxLQUFLLElBQUk7WUFDNUIsT0FBTzs7Ozs7O0FBTW5CO0FDNUJBLG9CQUFvQjtBQUNwQixDQUFDLFdBQVc7RUFDVjtFQUNBLFFBQVEsT0FBTyxVQUFVLENBQUMsV0FBVyxjQUFjLGdCQUFnQixnQkFBZ0IsY0FBYzs7Ozs7O0VBTWpHLFFBQVEsT0FBTztLQUNaLE9BQU8sQ0FBQztNQUNQLFNBQVMsZ0JBQWdCO1FBQ3ZCO1dBQ0csS0FBSyxLQUFLO1lBQ1QsWUFBWTs7V0FFYixLQUFLLHVCQUF1Qjs7WUFFM0IsYUFBYTs7V0FFZCxLQUFLLDhCQUE4Qjs7WUFFbEMsYUFBYTs7V0FFZCxVQUFVO1lBQ1QsVUFBVTs7Ozs7OztBQU90QiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyI7XG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gbmF2aWdhdGlvbiBjb250cm9sbGVyXG4gIGFuZ3VsYXIubW9kdWxlKCdnaXRBcGlDdHJsJywgWydnaXRGYWN0b3J5J10pXG4gICAgLmNvbnRyb2xsZXIoJ05hdmlnYXRlQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgZ2V0TGlzdElzc3VlcywgJHJvdXRlUGFyYW1zKSB7XG4gICAgICBnZXRMaXN0SXNzdWVzLnF1ZXJ5KCRyb3V0ZVBhcmFtcy5vcmcsICRyb3V0ZVBhcmFtcy5yZXBvKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgJHNjb3BlLmlzc3VlcyA9IGFuZ3VsYXIuY29weShkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmlzc3Vlc0l0ZW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLm51bWJlciA9ICRyb3V0ZVBhcmFtcy5udW1iZXI7XG4gICAgICAgICRzY29wZS5vcmcgPSAkcm91dGVQYXJhbXMub3JnO1xuICAgICAgICAkc2NvcGUucmVwbyA9ICRyb3V0ZVBhcmFtcy5yZXBvO1xuICAgICAgICB2YXIgaXNzdWUgPSAkc2NvcGUuaXNzdWVzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0ubnVtYmVyID09ICRzY29wZS5udW1iZXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzc3VlLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAkc2NvcGUuaXNzdWUgPSBpc3N1ZVswXTtcbiAgICAgIH07XG4gICAgfSlcblxuICAvLyByZXBvIGFuZCBvcmcgY29udHJvbGxlciBzZWFyY2hcbiAgLmNvbnRyb2xsZXIoJ1NlYXJjaFJlcG9DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIGdldExpc3RJc3N1ZXMpIHtcbiAgICBpZiAoJGxvY2F0aW9uLiQkcGF0aCA9PT0gJycpIHtcbiAgICAgICRzY29wZS5zdGFydFBhZ2UgPSB0cnVlO1xuICAgIH1cbiAgICAkc2NvcGUuc2VhcmNoUmVwbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgZ2V0TGlzdElzc3Vlcy5xdWVyeSgkc2NvcGUub3JnLCAkc2NvcGUucmVwbykudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICRzY29wZS5kYXRhID0gYW5ndWxhci5jb3B5KGRhdGEpO1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuc3RhcnRQYWdlID0gZmFsc2U7XG4gICAgICAkbG9jYXRpb24ucGF0aCgnLycgKyAkc2NvcGUub3JnICsgJy8nICsgJHNjb3BlLnJlcG8gKyAnL2lzc3VlcycpO1xuICAgIH07XG4gIH0pXG5cbiAgLy9zaG93IGNvbW1lbnRzIGNvbnRyb2xsZXJcbiAgLmNvbnRyb2xsZXIoJ0NvbW1lbnRzQ3RybCcsIGZ1bmN0aW9uKGdldExpc3RDb21tZW50cywgJHNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICBpZiAoJHJvdXRlUGFyYW1zLm51bWJlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBnZXRMaXN0Q29tbWVudHMucXVlcnkoJHJvdXRlUGFyYW1zLm9yZywgJHJvdXRlUGFyYW1zLnJlcG8sICRyb3V0ZVBhcmFtcy5udW1iZXIpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuY29tbWVudHMgPSBhbmd1bGFyLmNvcHkoZGF0YSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpZiB3b3JrIDEnLCAkc2NvcGUuaXNzdWVzKTtcbiAgICAgICAgdmFyIGlzc3VlID0gJHNjb3BlLmlzc3Vlcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLm51bWJlciA9PSAkcm91dGVQYXJhbXMubnVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2lmIHdvcmsnLCAkc2NvcGUpO1xuXG4gICAgICAgIGlmICghaXNzdWUubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICRzY29wZS5pc3N1ZSA9IGlzc3VlWzBdO1xuICAgICAgICBjb25zb2xlLmxvZygnaWYgd29yaycsICRzY29wZS5pc3N1ZSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdpZiB3b3JrIDInLCAkc2NvcGUuaXNzdWVzKTtcblxuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIGRpcmVjdGl2ZSAgc2hvdyAgMSBpc3N1ZVxuICBhbmd1bGFyLm1vZHVsZSgnZ2l0RGVyZWN0aXZlJywgWydnaXRBcGlDdHJsJ10pXG4gICAgLmRpcmVjdGl2ZSgnaXNzdWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250cm9sbGVyOiAnTmF2aWdhdGVDdHJsJyxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9zaG93SXNzdWVzLmh0bWwnXG4gICAgICB9O1xuICAgIH0pXG4gICAgLy8gZGlyZWN0aXZlIHNob3cgYWxsIGNvbW1lbnRzXG4gICAgLmRpcmVjdGl2ZSgnY29tbWVudHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb21tZW50c0N0cmwnLFxuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2NvbW1lbnRzLmh0bWwnXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmRpcmVjdGl2ZSgncGFnZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJ1bnMgZHVyaW5nIGNvbXBpbGVcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIG5hbWU6ICcnLFxuICAgICAgICAvLyBwcmlvcml0eTogMSxcbiAgICAgICAgLy8gdGVybWluYWw6IHRydWUsXG4gICAgICAgIC8vIHNjb3BlOiB7fSwgLy8ge30gPSBpc29sYXRlLCB0cnVlID0gY2hpbGQsIGZhbHNlL3VuZGVmaW5lZCA9IG5vIGNoYW5nZVxuICAgICAgICAvLyBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlKSB7fSxcbiAgICAgICAgLy8gcmVxdWlyZTogJ25nTW9kZWwnLCAvLyBBcnJheSA9IG11bHRpcGxlIHJlcXVpcmVzLCA/ID0gb3B0aW9uYWwsIF4gPSBjaGVjayBwYXJlbnQgZWxlbWVudHNcbiAgICAgICAgcmVzdHJpY3Q6ICdFJywgLy8gRSA9IEVsZW1lbnQsIEEgPSBBdHRyaWJ1dGUsIEMgPSBDbGFzcywgTSA9IENvbW1lbnRcbiAgICAgICAgLy8gdGVtcGxhdGU6ICcnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXR0ZS9wYWdlcy5odG1sJ1xuICAgICAgICAgIC8vIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgLy8gdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAvLyBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzLCBmdW5jdGlvbiB0cmFuc2NsdWRlKGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbil7IHJldHVybiBmdW5jdGlvbiBsaW5raW5nKHNjb3BlLCBlbG0sIGF0dHJzKXt9fSkpLFxuICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCI7XG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhci5tb2R1bGUoJ2dpdEZhY3RvcnknLCBbXSlcbiAgICAuZmFjdG9yeSgnZ2V0TGlzdElzc3VlcycsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBxdWVyeTogZnVuY3Rpb24ob3JnLCByZXBvKSB7XG4gICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLycgKyBvcmcgKyAnLycgKyByZXBvICsgJy9pc3N1ZXMnO1xuICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgdmFyIGxpc3QgPSBhbmd1bGFyLmNvcHkocmVzLmRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSlcbiAgICAvLyBmYWN0b3J5IGdldCBjb21tZW50cyBsaXN0IGZyb20gZ2l0IGh1YlxuICAgIC5mYWN0b3J5KCdnZXRMaXN0Q29tbWVudHMnLCBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcXVlcnk6IGZ1bmN0aW9uKG9yZywgcmVwbywgbnVtYmVyKSB7XG4gICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLycgKyBvcmcgKyAnLycgKyByZXBvICsgJy9pc3N1ZXMnICsgJy8nICsgbnVtYmVyICsgJy8nICsgJ2NvbW1lbnRzJztcbiAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gYW5ndWxhci5jb3B5KHJlcy5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIi8qIGFuZ3VsYXIgR2xvYmFsKi8gO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdnaXRBcGknLCBbJ25nUm91dGUnLCAnbmdSZXNvdXJjZScsICdnaXREZXJlY3RpdmUnLCAnZ2l0QXBpQ29uZmlnJywgJ2dpdEFwaUN0cmwnLCAnZ2l0RmFjdG9yeSddKTtcbiAgLy9jb250cm9sbGVyc1xuXG4gIC8vZGlyZWN0aXZlc1xuXG4gIC8vIGNvbmZpZ1xuICBhbmd1bGFyLm1vZHVsZSgnZ2l0QXBpJylcbiAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLFxuICAgICAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAud2hlbignLycsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZWFyY2hSZXBvQ3RybCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC53aGVuKCcvOm9yZy86cmVwby9pc3N1ZXMvJywge1xuICAgICAgICAgICAgLy8gY29udHJvbGxlcjogJ05hdmlnYXRlQ3RybCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL25hdi5odG1sJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLndoZW4oJy86b3JnLzpyZXBvL2lzc3Vlcy86bnVtYmVyJywge1xuICAgICAgICAgICAgLy8gY29udHJvbGxlcjogJ0NvbW1lbnRzQ3RybCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL25hdi5odG1sJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICB0ZW1scGF0ZTogJzxoMT4gTk8gcGFnZSBoZXJlPGgxPidcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICBdKTtcbiAgLy8gZmFjdG9yeVxufSkoKTtcbi8vIGN1cmwgaHR0cHM6IC8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvY29kZWNlcHRpb24vY29kZWNlcHRpb24vaXNzdWVzXFw/cGFnZVxcPTVcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
;
(function() {
  'use strict';
  // navigation controller
  angular.module('gitApiCtrl', ['gitFactory'])
    .controller('NavigateCtrl', ["$scope", "getListIssues", "$routeParams", function($scope, getListIssues, $routeParams) {
      getListIssues.query($routeParams.org, $routeParams.repo).then(function(data) {
        $scope.issues = angular.copy(data);
      });
      $scope.issuesItem = function() {
        $scope.number = $routeParams.number;
        $scope.org = $routeParams.org;
        $scope.repo = $routeParams.repo;
        var issue = $scope.issues.filter(function(item) {
          return item.number == $scope.number;
        });
        if (!issue.length) return;
        $scope.issue = issue[0];
      };
    }])

  // repo and org controller search
  .controller('SearchRepoCtrl', ["$scope", "$location", "getListIssues", function($scope, $location, getListIssues) {
    if ($location.$$path === '') {
      $scope.startPage = true;
    }
    $scope.searchRepo = function() {
      getListIssues.query($scope.org, $scope.repo).then(function(data) {
        $scope.data = angular.copy(data);
      });
      $scope.startPage = false;
      $location.path('/' + $scope.org + '/' + $scope.repo + '/issues');
    };
  }])

  //show comments controller
  .controller('CommentsCtrl', ["getListComments", "$scope", "$routeParams", function(getListComments, $scope, $routeParams) {
    if ($routeParams.number !== undefined) {
      getListComments.query($routeParams.org, $routeParams.repo, $routeParams.number).then(function(data) {
        $scope.comments = angular.copy(data);
        console.log('if work 1', $scope.issues);
        var issue = $scope.issues.filter(function(item) {
          return item.number == $routeParams.number;
        });
        // console.log('if work', $scope);

        if (!issue.length) return;
        $scope.issue = issue[0];
        console.log('if work', $scope.issue);
      });
      console.log('if work 2', $scope.issues);

    }
  }]);
})();

;
(function() {
  'use strict';
  // directive  show  1 issue
  angular.module('gitDerective', ['gitApiCtrl'])
    .directive('issues', function() {
      return {
        controller: 'NavigateCtrl',
        restrict: 'E',
        templateUrl: 'template/showIssues.html'
      };
    })
    // directive show all comments
    .directive('comments', function() {
      return {
        controller: 'CommentsCtrl',
        restrict: 'E',
        templateUrl: 'template/comments.html'
      };
    })
    .directive('pages', function() {
      // Runs during compile
      return {
        // name: '',
        // priority: 1,
        // terminal: true,
        // scope: {}, // {} = isolate, true = child, false/undefined = no change
        // controller: function($scope, $element, $attrs, $transclude) {},
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        // template: '',
        templateUrl: 'templatte/pages.html'
          // replace: true,
          // transclude: true,
          // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
      };
    });
})();

;
(function() {
  'use strict';
  angular.module('gitFactory', [])
    .factory('getListIssues', ["$http", function($http) {
      return {
        query: function(org, repo) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }])
    // factory get comments list from git hub
    .factory('getListComments', ["$http", function($http) {
      return {
        query: function(org, repo, number) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues' + '/' + number + '/' + 'comments';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }]);
})();

/* angular Global*/
;
(function() {
  'use strict';
  angular.module('gitApi', ['ngRoute', 'ngResource', 'gitDerective', 'gitApiConfig', 'gitApiCtrl', 'gitFactory']);
  //controllers

  //directives

  // config
  angular.module('gitApi', ['ngRoute', 'ngResource'])
    .config(['$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/', {
            controller: 'SearchRepoCtrl'
          })
          .when('/:org/:repo/issues/', {
            // controller: 'NavigateCtrl',
            templateUrl: 'template/nav.html'
          })
          .when('/:org/:repo/issues/:number', {
            // controller: 'CommentsCtrl',
            templateUrl: 'template/nav.html'
          })
          .otherwise({
            temlpate: '<h1> NO page here<h1>'
          });
      }
    ]);
  // factory
})();
// curl https: //api.github.com/repos/codeception/codeception/issues\?page\=5

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvYXBwLmpzIiwiY29udHJvbGxlcnMuanMiLCJkaXJlY3RpdmUuanMiLCJmYWN0b3J5LmpzIiwiaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxDQUFDLFdBQVc7RUFDVjs7RUFFQSxRQUFRLE9BQU8sY0FBYyxDQUFDO0tBQzNCLFdBQVcsZ0JBQWdCLENBQUMsVUFBVSxpQkFBaUIsZ0JBQWdCLFNBQVMsUUFBUSxlQUFlLGNBQWM7TUFDcEgsY0FBYyxNQUFNLGFBQWEsS0FBSyxhQUFhLE1BQU0sS0FBSyxTQUFTLE1BQU07UUFDM0UsT0FBTyxTQUFTLFFBQVEsS0FBSzs7TUFFL0IsT0FBTyxhQUFhLFdBQVc7UUFDN0IsT0FBTyxTQUFTLGFBQWE7UUFDN0IsT0FBTyxNQUFNLGFBQWE7UUFDMUIsT0FBTyxPQUFPLGFBQWE7UUFDM0IsSUFBSSxRQUFRLE9BQU8sT0FBTyxPQUFPLFNBQVMsTUFBTTtVQUM5QyxPQUFPLEtBQUssVUFBVSxPQUFPOztRQUUvQixJQUFJLENBQUMsTUFBTSxRQUFRO1FBQ25CLE9BQU8sUUFBUSxNQUFNOzs7OztHQUsxQixXQUFXLGtCQUFrQixDQUFDLFVBQVUsYUFBYSxpQkFBaUIsU0FBUyxRQUFRLFdBQVcsZUFBZTtJQUNoSCxJQUFJLFVBQVUsV0FBVyxJQUFJO01BQzNCLE9BQU8sWUFBWTs7SUFFckIsT0FBTyxhQUFhLFdBQVc7TUFDN0IsY0FBYyxNQUFNLE9BQU8sS0FBSyxPQUFPLE1BQU0sS0FBSyxTQUFTLE1BQU07UUFDL0QsT0FBTyxPQUFPLFFBQVEsS0FBSzs7TUFFN0IsT0FBTyxZQUFZO01BQ25CLFVBQVUsS0FBSyxNQUFNLE9BQU8sTUFBTSxNQUFNLE9BQU8sT0FBTzs7Ozs7R0FLekQsV0FBVyxnQkFBZ0IsQ0FBQyxtQkFBbUIsVUFBVSxnQkFBZ0IsU0FBUyxpQkFBaUIsUUFBUSxjQUFjO0lBQ3hILElBQUksYUFBYSxXQUFXLFdBQVc7TUFDckMsZ0JBQWdCLE1BQU0sYUFBYSxLQUFL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O1lBQzVCLE9BQU87Ozs7OztLQU1kLFFBQVEsNkJBQW1CLFNBQVMsT0FBTztNQUMxQyxPQUFPO1FBQ0wsT0FBTyxTQUFTLEtBQUssTUFBTSxRQUFRO1VBQ2pDLElBQUksTUFBTSxrQ0FBa0MsTUFBTSxNQUFNLE9BQU8sWUFBWSxNQUFNLFNBQVMsTUFBTTtVQUNoRyxPQUFPLE1BQU0sSUFBSSxLQUFLLEtBQUssU0FBUyxLQUFLO1lBQ3ZDLElBQUksT0FBTyxRQUFRLEtBQUssSUFBSTtZQUM1QixPQUFPOzs7Ozs7QUFNbkI7QUM1QkEsb0JBQW9CO0FBQ3BCLENBQUMsV0FBVztFQUNWO0VBQ0EsUUFBUSxPQUFPLFVBQVUsQ0FBQyxXQUFXLGNBQWMsZ0JBQWdCLGdCQUFnQixjQUFjOzs7Ozs7RUFNakcsUUFBUSxPQUFPO0tBQ1osT0FBTyxDQUFDO01BQ1AsU0FBUyxnQkFBZ0I7UUFDdkI7V0FDRyxLQUFLLEtBQUs7WUFDVCxZQUFZOztXQUViLEtBQUssdUJBQXVCOztZQUUzQixhQUFhOztXQUVkLEtBQUssOEJBQThCOztZQUVsQyxhQUFhOztXQUVkLFVBQVU7WUFDVCxVQUFVOzs7Ozs7O0FBT3RCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjtcbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBuYXZpZ2F0aW9uIGNvbnRyb2xsZXJcbiAgYW5ndWxhci5tb2R1bGUoJ2dpdEFwaUN0cmwnLCBbJ2dpdEZhY3RvcnknXSlcbiAgICAuY29udHJvbGxlcignTmF2aWdhdGVDdHJsJywgW1wiJHNjb3BlXCIsIFwiZ2V0TGlzdElzc3Vlc1wiLCBcIiRyb3V0ZVBhcmFtc1wiLCBmdW5jdGlvbigkc2NvcGUsIGdldExpc3RJc3N1ZXMsICRyb3V0ZVBhcmFtcykge1xuICAgICAgZ2V0TGlzdElzc3Vlcy5xdWVyeSgkcm91dGVQYXJhbXMub3JnLCAkcm91dGVQYXJhbXMucmVwbykudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICRzY29wZS5pc3N1ZXMgPSBhbmd1bGFyLmNvcHkoZGF0YSk7XG4gICAgICB9KTtcbiAgICAgICRzY29wZS5pc3N1ZXNJdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5udW1iZXIgPSAkcm91dGVQYXJhbXMubnVtYmVyO1xuICAgICAgICAkc2NvcGUub3JnID0gJHJvdXRlUGFyYW1zLm9yZztcbiAgICAgICAgJHNjb3BlLnJlcG8gPSAkcm91dGVQYXJhbXMucmVwbztcbiAgICAgICAgdmFyIGlzc3VlID0gJHNjb3BlLmlzc3Vlcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLm51bWJlciA9PSAkc2NvcGUubnVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc3N1ZS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgJHNjb3BlLmlzc3VlID0gaXNzdWVbMF07XG4gICAgICB9O1xuICAgIH1dKVxuXG4gIC8vIHJlcG8gYW5kIG9yZyBjb250cm9sbGVyIHNlYXJjaFxuICAuY29udHJvbGxlcignU2VhcmNoUmVwb0N0cmwnLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCJnZXRMaXN0SXNzdWVzXCIsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBnZXRMaXN0SXNzdWVzKSB7XG4gICAgaWYgKCRsb2NhdGlvbi4kJHBhdGggPT09ICcnKSB7XG4gICAgICAkc2NvcGUuc3RhcnRQYWdlID0gdHJ1ZTtcbiAgICB9XG4gICAgJHNjb3BlLnNlYXJjaFJlcG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIGdldExpc3RJc3N1ZXMucXVlcnkoJHNjb3BlLm9yZywgJHNjb3BlLnJlcG8pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuZGF0YSA9IGFuZ3VsYXIuY29weShkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLnN0YXJ0UGFnZSA9IGZhbHNlO1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nICsgJHNjb3BlLm9yZyArICcvJyArICRzY29wZS5yZXBvICsgJy9pc3N1ZXMnKTtcbiAgICB9O1xuICB9XSlcblxuICAvL3Nob3cgY29tbWVudHMgY29udHJvbGxlclxuICAuY29udHJvbGxlcignQ29tbWVudHNDdHJsJywgW1wiZ2V0TGlzdENvbW1lbnRzXCIsIFwiJHNjb3BlXCIsIFwiJHJvdXRlUGFyYW1zXCIsIGZ1bmN0aW9uKGdldExpc3RDb21tZW50cywgJHNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICBpZiAoJHJvdXRlUGFyYW1zLm51bWJlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBnZXRMaXN0Q29tbWVudHMucXVlcnkoJHJvdXRlUGFyYW1zLm9yZywgJHJvdXRlUGFyYW1zLnJlcG8sICRyb3V0ZVBhcmFtcy5udW1iZXIpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuY29tbWVudHMgPSBhbmd1bGFyLmNvcHkoZGF0YSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpZiB3b3JrIDEnLCAkc2NvcGUuaXNzdWVzKTtcbiAgICAgICAgdmFyIGlzc3VlID0gJHNjb3BlLmlzc3Vlcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLm51bWJlciA9PSAkcm91dGVQYXJhbXMubnVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2lmIHdvcmsnLCAkc2NvcGUpO1xuXG4gICAgICAgIGlmICghaXNzdWUubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICRzY29wZS5pc3N1ZSA9IGlzc3VlWzBdO1xuICAgICAgICBjb25zb2xlLmxvZygnaWYgd29yaycsICRzY29wZS5pc3N1ZSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdpZiB3b3JrIDInLCAkc2NvcGUuaXNzdWVzKTtcblxuICAgIH1cbiAgfV0pO1xufSkoKTtcblxuO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIGRpcmVjdGl2ZSAgc2hvdyAgMSBpc3N1ZVxuICBhbmd1bGFyLm1vZHVsZSgnZ2l0RGVyZWN0aXZlJywgWydnaXRBcGlDdHJsJ10pXG4gICAgLmRpcmVjdGl2ZSgnaXNzdWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250cm9sbGVyOiAnTmF2aWdhdGVDdHJsJyxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9zaG93SXNzdWVzLmh0bWwnXG4gICAgICB9O1xuICAgIH0pXG4gICAgLy8gZGlyZWN0aXZlIHNob3cgYWxsIGNvbW1lbnRzXG4gICAgLmRpcmVjdGl2ZSgnY29tbWVudHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb21tZW50c0N0cmwnLFxuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2NvbW1lbnRzLmh0bWwnXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmRpcmVjdGl2ZSgncGFnZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJ1bnMgZHVyaW5nIGNvbXBpbGVcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIG5hbWU6ICcnLFxuICAgICAgICAvLyBwcmlvcml0eTogMSxcbiAgICAgICAgLy8gdGVybWluYWw6IHRydWUsXG4gICAgICAgIC8vIHNjb3BlOiB7fSwgLy8ge30gPSBpc29sYXRlLCB0cnVlID0gY2hpbGQsIGZhbHNlL3VuZGVmaW5lZCA9IG5vIGNoYW5nZVxuICAgICAgICAvLyBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlKSB7fSxcbiAgICAgICAgLy8gcmVxdWlyZTogJ25nTW9kZWwnLCAvLyBBcnJheSA9IG11bHRpcGxlIHJlcXVpcmVzLCA/ID0gb3B0aW9uYWwsIF4gPSBjaGVjayBwYXJlbnQgZWxlbWVudHNcbiAgICAgICAgcmVzdHJpY3Q6ICdFJywgLy8gRSA9IEVsZW1lbnQsIEEgPSBBdHRyaWJ1dGUsIEMgPSBDbGFzcywgTSA9IENvbW1lbnRcbiAgICAgICAgLy8gdGVtcGxhdGU6ICcnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXR0ZS9wYWdlcy5odG1sJ1xuICAgICAgICAgIC8vIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgLy8gdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAvLyBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzLCBmdW5jdGlvbiB0cmFuc2NsdWRlKGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbil7IHJldHVybiBmdW5jdGlvbiBsaW5raW5nKHNjb3BlLCBlbG0sIGF0dHJzKXt9fSkpLFxuICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG5cbjtcbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnZ2l0RmFjdG9yeScsIFtdKVxuICAgIC5mYWN0b3J5KCdnZXRMaXN0SXNzdWVzJywgW1wiJGh0dHBcIiwgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHF1ZXJ5OiBmdW5jdGlvbihvcmcsIHJlcG8pIHtcbiAgICAgICAgICB2YXIgdXJsID0gJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvJyArIG9yZyArICcvJyArIHJlcG8gKyAnL2lzc3Vlcyc7XG4gICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IGFuZ3VsYXIuY29weShyZXMuZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XSlcbiAgICAvLyBmYWN0b3J5IGdldCBjb21tZW50cyBsaXN0IGZyb20gZ2l0IGh1YlxuICAgIC5mYWN0b3J5KCdnZXRMaXN0Q29tbWVudHMnLCBbXCIkaHR0cFwiLCBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcXVlcnk6IGZ1bmN0aW9uKG9yZywgcmVwbywgbnVtYmVyKSB7XG4gICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zLycgKyBvcmcgKyAnLycgKyByZXBvICsgJy9pc3N1ZXMnICsgJy8nICsgbnVtYmVyICsgJy8nICsgJ2NvbW1lbnRzJztcbiAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gYW5ndWxhci5jb3B5KHJlcy5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dKTtcbn0pKCk7XG5cbi8qIGFuZ3VsYXIgR2xvYmFsKi8gO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdnaXRBcGknLCBbJ25nUm91dGUnLCAnbmdSZXNvdXJjZScsICdnaXREZXJlY3RpdmUnLCAnZ2l0QXBpQ29uZmlnJywgJ2dpdEFwaUN0cmwnLCAnZ2l0RmFjdG9yeSddKTtcbiAgLy9jb250cm9sbGVyc1xuXG4gIC8vZGlyZWN0aXZlc1xuXG4gIC8vIGNvbmZpZ1xuICBhbmd1bGFyLm1vZHVsZSgnZ2l0QXBpJylcbiAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLFxuICAgICAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAud2hlbignLycsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZWFyY2hSZXBvQ3RybCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC53aGVuKCcvOm9yZy86cmVwby9pc3N1ZXMvJywge1xuICAgICAgICAgICAgLy8gY29udHJvbGxlcjogJ05hdmlnYXRlQ3RybCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL25hdi5odG1sJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLndoZW4oJy86b3JnLzpyZXBvL2lzc3Vlcy86bnVtYmVyJywge1xuICAgICAgICAgICAgLy8gY29udHJvbGxlcjogJ0NvbW1lbnRzQ3RybCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL25hdi5odG1sJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICB0ZW1scGF0ZTogJzxoMT4gTk8gcGFnZSBoZXJlPGgxPidcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICBdKTtcbiAgLy8gZmFjdG9yeVxufSkoKTtcbi8vIGN1cmwgaHR0cHM6IC8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvY29kZWNlcHRpb24vY29kZWNlcHRpb24vaXNzdWVzXFw/cGFnZVxcPTVcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiblJ5YjJ4c1pYSnpMbXB6SWl3aVpHbHlaV04wYVhabExtcHpJaXdpWm1GamRHOXllUzVxY3lJc0ltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFc1EwRkJReXhYUVVGWE8wVkJRMVk3TzBWQlJVRXNVVUZCVVN4UFFVRlBMR05CUVdNc1EwRkJRenRMUVVNelFpeFhRVUZYTERSRVFVRm5RaXhUUVVGVExGRkJRVkVzWlVGQlpTeGpRVUZqTzAxQlEzaEZMR05CUVdNc1RVRkJUU3hoUVVGaExFdEJRVXNzWVVGQllTeE5RVUZOTEV0QlFVc3NVMEZCVXl4TlFVRk5PMUZCUXpORkxFOUJRVThzVTBGQlV5eFJRVUZSTEV0QlFVczdPMDFCUlM5Q0xFOUJRVThzWVVGQllTeFhRVUZYTzFGQlF6ZENMRTlCUVU4c1UwRkJVeXhoUVVGaE8xRkJRemRDTEU5QlFVOHNUVUZCVFN4aFFVRmhPMUZCUXpGQ0xFOUJRVThzVDBGQlR5eGhRVUZoTzFGQlF6TkNMRWxCUVVrc1VVRkJVU3hQUVVGUExFOUJRVThzVDBGQlR5eFRRVUZUTEUxQlFVMDdWVUZET1VNc1QwRkJUeXhMUVVGTExGVkJRVlVzVDBGQlR6czdVVUZGTDBJc1NVRkJTU3hEUVVGRExFMUJRVTBzVVVGQlVUdFJRVU51UWl4UFFVRlBMRkZCUVZFc1RVRkJUVHM3T3pzN1IwRkxNVUlzVjBGQlZ5d3lSRUZCYTBJc1UwRkJVeXhSUVVGUkxGZEJRVmNzWlVGQlpUdEpRVU4yUlN4SlFVRkpMRlZCUVZVc1YwRkJWeXhKUVVGSk8wMUJRek5DTEU5QlFVOHNXVUZCV1RzN1NVRkZja0lzVDBGQlR5eGhRVUZoTEZkQlFWYzdUVUZETjBJc1kwRkJZeXhOUVVGTkxFOUJRVThzUzBGQlN5eFBRVUZQTEUxQlFVMHNTMEZCU3l4VFFVRlRMRTFCUVUwN1VVRkRMMFFzVDBGQlR5eFBRVUZQTEZGQlFWRXNTMEZCU3pzN1RVRkZOMElzVDBGQlR5eFpRVUZaTzAxQlEyNUNMRlZCUVZVc1MwRkJTeXhOUVVGTkxFOUJRVThzVFVGQlRTeE5RVUZOTEU5QlFVOHNUMEZCVHpzN096czdSMEZMZWtRc1YwRkJWeXc0UkVGQlowSXNVMEZCVXl4cFFrRkJhVUlzVVVGQlVTeGpRVUZqTzBsQlF6RkZMRWxCUVVrc1lVRkJZU3hYUVVGWExGZEJRVmM3VFVGRGNrTXNaMEpCUVdkQ0xFMUJRVTBzWVVGQllTeExRVUZMTEdGQlFXRXNUVUZCVFN4aFFVRmhMRkZCUVZFc1MwRkJTeXhUUVVGVExFMUJRVTA3VVVGRGJFY3NUMEZCVHl4WFFVRlhMRkZCUVZFc1MwRkJTenRSUVVNdlFpeFJRVUZSTEVsQlFVa3NZVUZCWVN4UFFVRlBPMUZCUTJoRExFbEJRVWtzVVVGQlVTeFBRVUZQTEU5QlFVOHNUMEZCVHl4VFFVRlRMRTFCUVUwN1ZVRkRPVU1zVDBGQlR5eExRVUZMTEZWQlFWVXNZVUZCWVRzN096dFJRVWx5UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hSUVVGUk8xRkJRMjVDTEU5QlFVOHNVVUZCVVN4TlFVRk5PMUZCUTNKQ0xGRkJRVkVzU1VGQlNTeFhRVUZYTEU5QlFVODdPMDFCUldoRExGRkJRVkVzU1VGQlNTeGhRVUZoTEU5QlFVODdPenM3TzBGQlMzUkRPMEZEZGtSQk8wRkJRMEVzUTBGQlF5eFhRVUZYTzBWQlExWTdPMFZCUlVFc1VVRkJVU3hQUVVGUExHZENRVUZuUWl4RFFVRkRPMHRCUXpkQ0xGVkJRVlVzVlVGQlZTeFhRVUZYTzAxQlF6bENMRTlCUVU4N1VVRkRUQ3haUVVGWk8xRkJRMW9zVlVGQlZUdFJRVU5XTEdGQlFXRTdPenM3UzBGSmFFSXNWVUZCVlN4WlFVRlpMRmRCUVZjN1RVRkRhRU1zVDBGQlR6dFJRVU5NTEZsQlFWazdVVUZEV2l4VlFVRlZPMUZCUTFZc1lVRkJZVHM3TzB0QlIyaENMRlZCUVZVc1UwRkJVeXhYUVVGWE96dE5RVVUzUWl4UFFVRlBPenM3T3pzN08xRkJUMHdzVlVGQlZUczdVVUZGVml4aFFVRmhPenM3T3pzN08wRkJUM0pDTzBGRGRFTkJPMEZCUTBFc1EwRkJReXhYUVVGWE8wVkJRMVk3UlVGRFFTeFJRVUZSTEU5QlFVOHNZMEZCWXp0TFFVTXhRaXhSUVVGUkxESkNRVUZwUWl4VFFVRlRMRTlCUVU4N1RVRkRlRU1zVDBGQlR6dFJRVU5NTEU5QlFVOHNVMEZCVXl4TFFVRkxMRTFCUVUwN1ZVRkRla0lzU1VGQlNTeE5RVUZOTEd0RFFVRnJReXhOUVVGTkxFMUJRVTBzVDBGQlR6dFZRVU12UkN4UFFVRlBMRTFCUVUwc1NVRkJTU3hMUVVGTExFdEJRVXNzVTBGQlV5eExRVUZMTzFsQlEzWkRMRWxCUVVrc1QwRkJUeXhSUVVGUkxFdEJRVXNzU1VGQlNUdFpRVU0xUWl4UFFVRlBPenM3T3pzN1MwRk5aQ3hSUVVGUkxEWkNRVUZ0UWl4VFFVRlRMRTlCUVU4N1RVRkRNVU1zVDBGQlR6dFJRVU5NTEU5QlFVOHNVMEZCVXl4TFFVRkxMRTFCUVUwc1VVRkJVVHRWUVVOcVF5eEpRVUZKTEUxQlFVMHNhME5CUVd0RExFMUJRVTBzVFVGQlRTeFBRVUZQTEZsQlFWa3NUVUZCVFN4VFFVRlRMRTFCUVUwN1ZVRkRhRWNzVDBGQlR5eE5RVUZOTEVsQlFVa3NTMEZCU3l4TFFVRkxMRk5CUVZNc1MwRkJTenRaUVVOMlF5eEpRVUZKTEU5QlFVOHNVVUZCVVN4TFFVRkxMRWxCUVVrN1dVRkROVUlzVDBGQlR6czdPenM3TzBGQlRXNUNPMEZETlVKQkxHOUNRVUZ2UWp0QlFVTndRaXhEUVVGRExGZEJRVmM3UlVGRFZqdEZRVU5CTEZGQlFWRXNUMEZCVHl4VlFVRlZMRU5CUVVNc1YwRkJWeXhqUVVGakxHZENRVUZuUWl4blFrRkJaMElzWTBGQll6czdPenM3TzBWQlRXcEhMRkZCUVZFc1QwRkJUenRMUVVOYUxFOUJRVThzUTBGQlF6dE5RVU5RTEZOQlFWTXNaMEpCUVdkQ08xRkJRM1pDTzFkQlEwY3NTMEZCU3l4TFFVRkxPMWxCUTFRc1dVRkJXVHM3VjBGRllpeExRVUZMTEhWQ1FVRjFRanM3V1VGRk0wSXNZVUZCWVRzN1YwRkZaQ3hMUVVGTExEaENRVUU0UWpzN1dVRkZiRU1zWVVGQllUczdWMEZGWkN4VlFVRlZPMWxCUTFRc1ZVRkJWVHM3T3pzN096dEJRVTkwUWlJc0ltWnBiR1VpT2lKaGNIQXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJN1hHNG9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDZDFjMlVnYzNSeWFXTjBKenRjYmlBZ0x5OGdibUYyYVdkaGRHbHZiaUJqYjI1MGNtOXNiR1Z5WEc0Z0lHRnVaM1ZzWVhJdWJXOWtkV3hsS0NkbmFYUkJjR2xEZEhKc0p5d2dXeWRuYVhSR1lXTjBiM0o1SjEwcFhHNGdJQ0FnTG1OdmJuUnliMnhzWlhJb0owNWhkbWxuWVhSbFEzUnliQ2NzSUdaMWJtTjBhVzl1S0NSelkyOXdaU3dnWjJWMFRHbHpkRWx6YzNWbGN5d2dKSEp2ZFhSbFVHRnlZVzF6S1NCN1hHNGdJQ0FnSUNCblpYUk1hWE4wU1hOemRXVnpMbkYxWlhKNUtDUnliM1YwWlZCaGNtRnRjeTV2Y21jc0lDUnliM1YwWlZCaGNtRnRjeTV5WlhCdktTNTBhR1Z1S0daMWJtTjBhVzl1S0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSkhOamIzQmxMbWx6YzNWbGN5QTlJR0Z1WjNWc1lYSXVZMjl3ZVNoa1lYUmhLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSkhOamIzQmxMbWx6YzNWbGMwbDBaVzBnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdKSE5qYjNCbExtNTFiV0psY2lBOUlDUnliM1YwWlZCaGNtRnRjeTV1ZFcxaVpYSTdYRzRnSUNBZ0lDQWdJQ1J6WTI5d1pTNXZjbWNnUFNBa2NtOTFkR1ZRWVhKaGJYTXViM0puTzF4dUlDQWdJQ0FnSUNBa2MyTnZjR1V1Y21Wd2J5QTlJQ1J5YjNWMFpWQmhjbUZ0Y3k1eVpYQnZPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FYTnpkV1VnUFNBa2MyTnZjR1V1YVhOemRXVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHbDBaVzB1Ym5WdFltVnlJRDA5SUNSelkyOXdaUzV1ZFcxaVpYSTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCcFppQW9JV2x6YzNWbExteGxibWQwYUNrZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBa2MyTnZjR1V1YVhOemRXVWdQU0JwYzNOMVpWc3dYVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2xjYmx4dUlDQXZMeUJ5WlhCdklHRnVaQ0J2Y21jZ1kyOXVkSEp2Ykd4bGNpQnpaV0Z5WTJoY2JpQWdMbU52Ym5SeWIyeHNaWElvSjFObFlYSmphRkpsY0c5RGRISnNKeXdnWm5WdVkzUnBiMjRvSkhOamIzQmxMQ0FrYkc5allYUnBiMjRzSUdkbGRFeHBjM1JKYzNOMVpYTXBJSHRjYmlBZ0lDQnBaaUFvSkd4dlkyRjBhVzl1TGlRa2NHRjBhQ0E5UFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ1J6WTI5d1pTNXpkR0Z5ZEZCaFoyVWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0FrYzJOdmNHVXVjMlZoY21Ob1VtVndieUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ1oyVjBUR2x6ZEVsemMzVmxjeTV4ZFdWeWVTZ2tjMk52Y0dVdWIzSm5MQ0FrYzJOdmNHVXVjbVZ3YnlrdWRHaGxiaWhtZFc1amRHbHZiaWhrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ1J6WTI5d1pTNWtZWFJoSUQwZ1lXNW5kV3hoY2k1amIzQjVLR1JoZEdFcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWtjMk52Y0dVdWMzUmhjblJRWVdkbElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBa2JHOWpZWFJwYjI0dWNHRjBhQ2duTHljZ0t5QWtjMk52Y0dVdWIzSm5JQ3NnSnk4bklDc2dKSE5qYjNCbExuSmxjRzhnS3lBbkwybHpjM1ZsY3ljcE8xeHVJQ0FnSUgwN1hHNGdJSDBwWEc1Y2JpQWdMeTl6YUc5M0lHTnZiVzFsYm5SeklHTnZiblJ5YjJ4c1pYSmNiaUFnTG1OdmJuUnliMnhzWlhJb0owTnZiVzFsYm5SelEzUnliQ2NzSUdaMWJtTjBhVzl1S0dkbGRFeHBjM1JEYjIxdFpXNTBjeXdnSkhOamIzQmxMQ0FrY205MWRHVlFZWEpoYlhNcElIdGNiaUFnSUNCcFppQW9KSEp2ZFhSbFVHRnlZVzF6TG01MWJXSmxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQm5aWFJNYVhOMFEyOXRiV1Z1ZEhNdWNYVmxjbmtvSkhKdmRYUmxVR0Z5WVcxekxtOXlaeXdnSkhKdmRYUmxVR0Z5WVcxekxuSmxjRzhzSUNSeWIzVjBaVkJoY21GdGN5NXVkVzFpWlhJcExuUm9aVzRvWm5WdVkzUnBiMjRvWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0FrYzJOdmNHVXVZMjl0YldWdWRITWdQU0JoYm1kMWJHRnlMbU52Y0hrb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHBaaUIzYjNKcklERW5MQ0FrYzJOdmNHVXVhWE56ZFdWektUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsemMzVmxJRDBnSkhOamIzQmxMbWx6YzNWbGN5NW1hV3gwWlhJb1puVnVZM1JwYjI0b2FYUmxiU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGRHVnRMbTUxYldKbGNpQTlQU0FrY205MWRHVlFZWEpoYlhNdWJuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb0oybG1JSGR2Y21zbkxDQWtjMk52Y0dVcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGFYTnpkV1V1YkdWdVozUm9LU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ1J6WTI5d1pTNXBjM04xWlNBOUlHbHpjM1ZsV3pCZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYVdZZ2QyOXlheWNzSUNSelkyOXdaUzVwYzNOMVpTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkcFppQjNiM0pySURJbkxDQWtjMk52Y0dVdWFYTnpkV1Z6S1R0Y2JseHVJQ0FnSUgxY2JpQWdmU2s3WEc1OUtTZ3BPMXh1SWl3aU8xeHVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc0Z0lDOHZJR1JwY21WamRHbDJaU0FnYzJodmR5QWdNU0JwYzNOMVpWeHVJQ0JoYm1kMWJHRnlMbTF2WkhWc1pTZ25aMmwwUkdWeVpXTjBhWFpsSnl3Z1d5ZG5hWFJCY0dsRGRISnNKMTBwWEc0Z0lDQWdMbVJwY21WamRHbDJaU2duYVhOemRXVnpKeXdnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCamIyNTBjbTlzYkdWeU9pQW5UbUYyYVdkaGRHVkRkSEpzSnl4Y2JpQWdJQ0FnSUNBZ2NtVnpkSEpwWTNRNklDZEZKeXhjYmlBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZWY213NklDZDBaVzF3YkdGMFpTOXphRzkzU1hOemRXVnpMbWgwYld3blhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwcFhHNGdJQ0FnTHk4Z1pHbHlaV04wYVhabElITm9iM2NnWVd4c0lHTnZiVzFsYm5SelhHNGdJQ0FnTG1ScGNtVmpkR2wyWlNnblkyOXRiV1Z1ZEhNbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJR052Ym5SeWIyeHNaWEk2SUNkRGIyMXRaVzUwYzBOMGNtd25MRnh1SUNBZ0lDQWdJQ0J5WlhOMGNtbGpkRG9nSjBVbkxGeHVJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWVnliRG9nSjNSbGJYQnNZWFJsTDJOdmJXMWxiblJ6TG1oMGJXd25YRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBYRzRnSUNBZ0xtUnBjbVZqZEdsMlpTZ25jR0ZuWlhNbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQzh2SUZKMWJuTWdaSFZ5YVc1bklHTnZiWEJwYkdWY2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUM4dklHNWhiV1U2SUNjbkxGeHVJQ0FnSUNBZ0lDQXZMeUJ3Y21sdmNtbDBlVG9nTVN4Y2JpQWdJQ0FnSUNBZ0x5OGdkR1Z5YldsdVlXdzZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDOHZJSE5qYjNCbE9pQjdmU3dnTHk4Z2UzMGdQU0JwYzI5c1lYUmxMQ0IwY25WbElEMGdZMmhwYkdRc0lHWmhiSE5sTDNWdVpHVm1hVzVsWkNBOUlHNXZJR05vWVc1blpWeHVJQ0FnSUNBZ0lDQXZMeUJqYjI1MGNtOXNiR1Z5T2lCbWRXNWpkR2x2Ymlna2MyTnZjR1VzSUNSbGJHVnRaVzUwTENBa1lYUjBjbk1zSUNSMGNtRnVjMk5zZFdSbEtTQjdmU3hjYmlBZ0lDQWdJQ0FnTHk4Z2NtVnhkV2x5WlRvZ0oyNW5UVzlrWld3bkxDQXZMeUJCY25KaGVTQTlJRzExYkhScGNHeGxJSEpsY1hWcGNtVnpMQ0EvSUQwZ2IzQjBhVzl1WVd3c0lGNGdQU0JqYUdWamF5QndZWEpsYm5RZ1pXeGxiV1Z1ZEhOY2JpQWdJQ0FnSUNBZ2NtVnpkSEpwWTNRNklDZEZKeXdnTHk4Z1JTQTlJRVZzWlcxbGJuUXNJRUVnUFNCQmRIUnlhV0oxZEdVc0lFTWdQU0JEYkdGemN5d2dUU0E5SUVOdmJXMWxiblJjYmlBZ0lDQWdJQ0FnTHk4Z2RHVnRjR3hoZEdVNklDY25MRnh1SUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVlZ5YkRvZ0ozUmxiWEJzWVhSMFpTOXdZV2RsY3k1b2RHMXNKMXh1SUNBZ0lDQWdJQ0FnSUM4dklISmxjR3hoWTJVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkSEpoYm5OamJIVmtaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0F2THlCamIyMXdhV3hsT2lCbWRXNWpkR2x2YmloMFJXeGxiV1Z1ZEN3Z2RFRjBkSEp6TENCbWRXNWpkR2x2YmlCMGNtRnVjMk5zZFdSbEtHWjFibU4wYVc5dUtITmpiM0JsTENCamJHOXVaVXhwYm10cGJtZEdiaWw3SUhKbGRIVnliaUJtZFc1amRHbHZiaUJzYVc1cmFXNW5LSE5qYjNCbExDQmxiRzBzSUdGMGRISnpLWHQ5ZlNrcExGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNibjBwS0NrN1hHNGlMQ0k3WEc0b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNkMWMyVWdjM1J5YVdOMEp6dGNiaUFnWVc1bmRXeGhjaTV0YjJSMWJHVW9KMmRwZEVaaFkzUnZjbmtuTENCYlhTbGNiaUFnSUNBdVptRmpkRzl5ZVNnbloyVjBUR2x6ZEVsemMzVmxjeWNzSUdaMWJtTjBhVzl1S0NSb2RIUndLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0J4ZFdWeWVUb2dablZ1WTNScGIyNG9iM0puTENCeVpYQnZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSFZ5YkNBOUlDZG9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0TDNKbGNHOXpMeWNnS3lCdmNtY2dLeUFuTHljZ0t5QnlaWEJ2SUNzZ0p5OXBjM04xWlhNbk8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQWthSFIwY0M1blpYUW9kWEpzS1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeHBjM1FnUFNCaGJtZDFiR0Z5TG1OdmNIa29jbVZ6TG1SaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4cGMzUTdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTbGNiaUFnSUNBdkx5Qm1ZV04wYjNKNUlHZGxkQ0JqYjIxdFpXNTBjeUJzYVhOMElHWnliMjBnWjJsMElHaDFZbHh1SUNBZ0lDNW1ZV04wYjNKNUtDZG5aWFJNYVhOMFEyOXRiV1Z1ZEhNbkxDQm1kVzVqZEdsdmJpZ2thSFIwY0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2NYVmxjbms2SUdaMWJtTjBhVzl1S0c5eVp5d2djbVZ3Ynl3Z2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhWeWJDQTlJQ2RvZEhSd2N6b3ZMMkZ3YVM1bmFYUm9kV0l1WTI5dEwzSmxjRzl6THljZ0t5QnZjbWNnS3lBbkx5Y2dLeUJ5WlhCdklDc2dKeTlwYzNOMVpYTW5JQ3NnSnk4bklDc2diblZ0WW1WeUlDc2dKeThuSUNzZ0oyTnZiVzFsYm5Sekp6dGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKR2gwZEhBdVoyVjBLSFZ5YkNrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNhWE4wSUQwZ1lXNW5kV3hoY2k1amIzQjVLSEpsY3k1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCc2FYTjBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBPMXh1ZlNrb0tUdGNiaUlzSWk4cUlHRnVaM1ZzWVhJZ1IyeHZZbUZzS2k4Z08xeHVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc0Z0lHRnVaM1ZzWVhJdWJXOWtkV3hsS0NkbmFYUkJjR2tuTENCYkoyNW5VbTkxZEdVbkxDQW5ibWRTWlhOdmRYSmpaU2NzSUNkbmFYUkVaWEpsWTNScGRtVW5MQ0FuWjJsMFFYQnBRMjl1Wm1sbkp5d2dKMmRwZEVGd2FVTjBjbXduTENBbloybDBSbUZqZEc5eWVTZGRLVHRjYmlBZ0x5OWpiMjUwY205c2JHVnljMXh1WEc0Z0lDOHZaR2x5WldOMGFYWmxjMXh1WEc0Z0lDOHZJR052Ym1acFoxeHVJQ0JoYm1kMWJHRnlMbTF2WkhWc1pTZ25aMmwwUVhCcEp5bGNiaUFnSUNBdVkyOXVabWxuS0ZzbkpISnZkWFJsVUhKdmRtbGtaWEluTEZ4dUlDQWdJQ0FnWm5WdVkzUnBiMjRvSkhKdmRYUmxVSEp2ZG1sa1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSkhKdmRYUmxVSEp2ZG1sa1pYSmNiaUFnSUNBZ0lDQWdJQ0F1ZDJobGJpZ25MeWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIyeHNaWEk2SUNkVFpXRnlZMmhTWlhCdlEzUnliQ2RjYmlBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQzUzYUdWdUtDY3ZPbTl5Wnk4NmNtVndieTlwYzNOMVpYTXZKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dWRISnZiR3hsY2pvZ0owNWhkbWxuWVhSbFEzUnliQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWVnliRG9nSjNSbGJYQnNZWFJsTDI1aGRpNW9kRzFzSjF4dUlDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnTG5kb1pXNG9KeTg2YjNKbkx6cHlaWEJ2TDJsemMzVmxjeTg2Ym5WdFltVnlKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dWRISnZiR3hsY2pvZ0owTnZiVzFsYm5SelEzUnliQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWVnliRG9nSjNSbGJYQnNZWFJsTDI1aGRpNW9kRzFzSjF4dUlDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnTG05MGFHVnlkMmx6WlNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxc2NHRjBaVG9nSnp4b01UNGdUazhnY0dGblpTQm9aWEpsUEdneFBpZGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0JkS1R0Y2JpQWdMeThnWm1GamRHOXllVnh1ZlNrb0tUdGNiaTh2SUdOMWNtd2dhSFIwY0hNNklDOHZZWEJwTG1kcGRHaDFZaTVqYjIwdmNtVndiM012WTI5a1pXTmxjSFJwYjI0dlkyOWtaV05sY0hScGIyNHZhWE56ZFdWelhGdy9jR0ZuWlZ4Y1BUVmNiaUpkTENKemIzVnlZMlZTYjI5MElqb2lMM052ZFhKalpTOGlmUT09IiwiO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIG5hdmlnYXRpb24gY29udHJvbGxlclxuICBhbmd1bGFyLm1vZHVsZSgnZ2l0QXBpQ3RybCcsIFsnZ2l0RmFjdG9yeSddKVxuICAgIC5jb250cm9sbGVyKCdOYXZpZ2F0ZUN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIGdldExpc3RJc3N1ZXMsICRyb3V0ZVBhcmFtcykge1xuICAgICAgZ2V0TGlzdElzc3Vlcy5xdWVyeSgkcm91dGVQYXJhbXMub3JnLCAkcm91dGVQYXJhbXMucmVwbykudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICRzY29wZS5pc3N1ZXMgPSBhbmd1bGFyLmNvcHkoZGF0YSk7XG4gICAgICB9KTtcbiAgICAgICRzY29wZS5pc3N1ZXNJdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5udW1iZXIgPSAkcm91dGVQYXJhbXMubnVtYmVyO1xuICAgICAgICAkc2NvcGUub3JnID0gJHJvdXRlUGFyYW1zLm9yZztcbiAgICAgICAgJHNjb3BlLnJlcG8gPSAkcm91dGVQYXJhbXMucmVwbztcbiAgICAgICAgdmFyIGlzc3VlID0gJHNjb3BlLmlzc3Vlcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLm51bWJlciA9PSAkc2NvcGUubnVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc3N1ZS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgJHNjb3BlLmlzc3VlID0gaXNzdWVbMF07XG4gICAgICB9O1xuICAgIH0pXG5cbiAgLy8gcmVwbyBhbmQgb3JnIGNvbnRyb2xsZXIgc2VhcmNoXG4gIC5jb250cm9sbGVyKCdTZWFyY2hSZXBvQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBnZXRMaXN0SXNzdWVzKSB7XG4gICAgaWYgKCRsb2NhdGlvbi4kJHBhdGggPT09ICcnKSB7XG4gICAgICAkc2NvcGUuc3RhcnRQYWdlID0gdHJ1ZTtcbiAgICB9XG4gICAgJHNjb3BlLnNlYXJjaFJlcG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIGdldExpc3RJc3N1ZXMucXVlcnkoJHNjb3BlLm9yZywgJHNjb3BlLnJlcG8pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuZGF0YSA9IGFuZ3VsYXIuY29weShkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLnN0YXJ0UGFnZSA9IGZhbHNlO1xuICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nICsgJHNjb3BlLm9yZyArICcvJyArICRzY29wZS5yZXBvICsgJy9pc3N1ZXMnKTtcbiAgICB9O1xuICB9KVxuXG4gIC8vc2hvdyBjb21tZW50cyBjb250cm9sbGVyXG4gIC5jb250cm9sbGVyKCdDb21tZW50c0N0cmwnLCBmdW5jdGlvbihnZXRMaXN0Q29tbWVudHMsICRzY29wZSwgJHJvdXRlUGFyYW1zKSB7XG4gICAgaWYgKCRyb3V0ZVBhcmFtcy5udW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZ2V0TGlzdENvbW1lbnRzLnF1ZXJ5KCRyb3V0ZVBhcmFtcy5vcmcsICRyb3V0ZVBhcmFtcy5yZXBvLCAkcm91dGVQYXJhbXMubnVtYmVyKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgJHNjb3BlLmNvbW1lbnRzID0gYW5ndWxhci5jb3B5KGRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygnaWYgd29yayAxJywgJHNjb3BlLmlzc3Vlcyk7XG4gICAgICAgIHZhciBpc3N1ZSA9ICRzY29wZS5pc3N1ZXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5udW1iZXIgPT0gJHJvdXRlUGFyYW1zLm51bWJlcjtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdpZiB3b3JrJywgJHNjb3BlKTtcblxuICAgICAgICBpZiAoIWlzc3VlLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAkc2NvcGUuaXNzdWUgPSBpc3N1ZVswXTtcbiAgICAgICAgY29uc29sZS5sb2coJ2lmIHdvcmsnLCAkc2NvcGUuaXNzdWUpO1xuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZygnaWYgd29yayAyJywgJHNjb3BlLmlzc3Vlcyk7XG5cbiAgICB9XG4gIH0pO1xufSkoKTtcbiIsIjtcbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBkaXJlY3RpdmUgIHNob3cgIDEgaXNzdWVcbiAgYW5ndWxhci5tb2R1bGUoJ2dpdERlcmVjdGl2ZScsIFsnZ2l0QXBpQ3RybCddKVxuICAgIC5kaXJlY3RpdmUoJ2lzc3VlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbGxlcjogJ05hdmlnYXRlQ3RybCcsXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvc2hvd0lzc3Vlcy5odG1sJ1xuICAgICAgfTtcbiAgICB9KVxuICAgIC8vIGRpcmVjdGl2ZSBzaG93IGFsbCBjb21tZW50c1xuICAgIC5kaXJlY3RpdmUoJ2NvbW1lbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250cm9sbGVyOiAnQ29tbWVudHNDdHJsJyxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9jb21tZW50cy5odG1sJ1xuICAgICAgfTtcbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoJ3BhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBSdW5zIGR1cmluZyBjb21waWxlXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBuYW1lOiAnJyxcbiAgICAgICAgLy8gcHJpb3JpdHk6IDEsXG4gICAgICAgIC8vIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgICAvLyBzY29wZToge30sIC8vIHt9ID0gaXNvbGF0ZSwgdHJ1ZSA9IGNoaWxkLCBmYWxzZS91bmRlZmluZWQgPSBubyBjaGFuZ2VcbiAgICAgICAgLy8gY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSkge30sXG4gICAgICAgIC8vIHJlcXVpcmU6ICduZ01vZGVsJywgLy8gQXJyYXkgPSBtdWx0aXBsZSByZXF1aXJlcywgPyA9IG9wdGlvbmFsLCBeID0gY2hlY2sgcGFyZW50IGVsZW1lbnRzXG4gICAgICAgIHJlc3RyaWN0OiAnRScsIC8vIEUgPSBFbGVtZW50LCBBID0gQXR0cmlidXRlLCBDID0gQ2xhc3MsIE0gPSBDb21tZW50XG4gICAgICAgIC8vIHRlbXBsYXRlOiAnJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0dGUvcGFnZXMuaHRtbCdcbiAgICAgICAgICAvLyByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgIC8vIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgLy8gY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycywgZnVuY3Rpb24gdHJhbnNjbHVkZShmdW5jdGlvbihzY29wZSwgY2xvbmVMaW5raW5nRm4peyByZXR1cm4gZnVuY3Rpb24gbGlua2luZyhzY29wZSwgZWxtLCBhdHRycyl7fX0pKSxcbiAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiO1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdnaXRGYWN0b3J5JywgW10pXG4gICAgLmZhY3RvcnkoJ2dldExpc3RJc3N1ZXMnLCBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcXVlcnk6IGZ1bmN0aW9uKG9yZywgcmVwbykge1xuICAgICAgICAgIHZhciB1cmwgPSAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8nICsgb3JnICsgJy8nICsgcmVwbyArICcvaXNzdWVzJztcbiAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gYW5ndWxhci5jb3B5KHJlcy5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pXG4gICAgLy8gZmFjdG9yeSBnZXQgY29tbWVudHMgbGlzdCBmcm9tIGdpdCBodWJcbiAgICAuZmFjdG9yeSgnZ2V0TGlzdENvbW1lbnRzJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHF1ZXJ5OiBmdW5jdGlvbihvcmcsIHJlcG8sIG51bWJlcikge1xuICAgICAgICAgIHZhciB1cmwgPSAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy8nICsgb3JnICsgJy8nICsgcmVwbyArICcvaXNzdWVzJyArICcvJyArIG51bWJlciArICcvJyArICdjb21tZW50cyc7XG4gICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IGFuZ3VsYXIuY29weShyZXMuZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCIvKiBhbmd1bGFyIEdsb2JhbCovIDtcbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnZ2l0QXBpJywgWyduZ1JvdXRlJywgJ25nUmVzb3VyY2UnLCAnZ2l0RGVyZWN0aXZlJywgJ2dpdEFwaUNvbmZpZycsICdnaXRBcGlDdHJsJywgJ2dpdEZhY3RvcnknXSk7XG4gIC8vY29udHJvbGxlcnNcblxuICAvL2RpcmVjdGl2ZXNcblxuICAvLyBjb25maWdcbiAgYW5ndWxhci5tb2R1bGUoJ2dpdEFwaScpXG4gICAgLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJyxcbiAgICAgIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnU2VhcmNoUmVwb0N0cmwnXG4gICAgICAgICAgfSlcbiAgICAgICAgICAud2hlbignLzpvcmcvOnJlcG8vaXNzdWVzLycsIHtcbiAgICAgICAgICAgIC8vIGNvbnRyb2xsZXI6ICdOYXZpZ2F0ZUN0cmwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9uYXYuaHRtbCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC53aGVuKCcvOm9yZy86cmVwby9pc3N1ZXMvOm51bWJlcicsIHtcbiAgICAgICAgICAgIC8vIGNvbnRyb2xsZXI6ICdDb21tZW50c0N0cmwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9uYXYuaHRtbCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgdGVtbHBhdGU6ICc8aDE+IE5PIHBhZ2UgaGVyZTxoMT4nXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgXSk7XG4gIC8vIGZhY3Rvcnlcbn0pKCk7XG4vLyBjdXJsIGh0dHBzOiAvL2FwaS5naXRodWIuY29tL3JlcG9zL2NvZGVjZXB0aW9uL2NvZGVjZXB0aW9uL2lzc3Vlc1xcP3BhZ2VcXD01XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

;
(function() {
  'use strict';
  // navigation controller
  angular.module('gitApiCtrl', ['gitFactory'])
    .controller('NavigateCtrl', ["$scope", "getListIssues", "$routeParams", function($scope, getListIssues, $routeParams) {
      getListIssues.query($routeParams.org, $routeParams.repo).then(function(data) {
        $scope.issues = angular.copy(data);
      });
      $scope.issuesItem = function() {
        $scope.number = $routeParams.number;
        $scope.org = $routeParams.org;
        $scope.repo = $routeParams.repo;
        var issue = $scope.issues.filter(function(item) {
          return item.number == $scope.number;
        });
        if (!issue.length) return;
        $scope.issue = issue[0];
      };
    }])

  // repo and org controller search
  .controller('SearchRepoCtrl', ["$scope", "$location", "getListIssues", function($scope, $location, getListIssues) {
    if ($location.$$path === '') {
      $scope.startPage = true;
    }
    $scope.searchRepo = function() {
      getListIssues.query($scope.org, $scope.repo).then(function(data) {
        $scope.data = angular.copy(data);
      });
      $scope.startPage = false;
      $location.path('/' + $scope.org + '/' + $scope.repo + '/issues');
    };
  }])

  //show comments controller
  .controller('CommentsCtrl', ["getListComments", "$scope", "$routeParams", function(getListComments, $scope, $routeParams) {
    if ($routeParams.number !== undefined) {
      getListComments.query($routeParams.org, $routeParams.repo, $routeParams.number).then(function(data) {
        $scope.comments = angular.copy(data);
        console.log('if work 1', $scope.issues);
        var issue = $scope.issues.filter(function(item) {
          return item.number == $routeParams.number;
        });
        // console.log('if work', $scope);

        if (!issue.length) return;
        $scope.issue = issue[0];
        console.log('if work', $scope.issue);
      });
      console.log('if work 2', $scope.issues);

    }
  }]);
})();

;
(function() {
  'use strict';
  // directive  show  1 issue
  angular.module('gitDerective', ['gitApiCtrl'])
    .directive('issues', function() {
      return {
        controller: 'NavigateCtrl',
        restrict: 'E',
        templateUrl: 'template/showIssues.html'
      };
    })
    // directive show all comments
    .directive('comments', function() {
      return {
        controller: 'CommentsCtrl',
        restrict: 'E',
        templateUrl: 'template/comments.html'
      };
    })
    .directive('pages', function() {
      // Runs during compile
      return {
        // name: '',
        // priority: 1,
        // terminal: true,
        // scope: {}, // {} = isolate, true = child, false/undefined = no change
        // controller: function($scope, $element, $attrs, $transclude) {},
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        // template: '',
        templateUrl: 'templatte/pages.html'
          // replace: true,
          // transclude: true,
          // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
      };
    });
})();

;
(function() {
  'use strict';
  angular.module('gitFactory', [])
    .factory('getListIssues', ["$http", function($http) {
      return {
        query: function(org, repo) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }])
    // factory get comments list from git hub
    .factory('getListComments', ["$http", function($http) {
      return {
        query: function(org, repo, number) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues' + '/' + number + '/' + 'comments';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }]);
})();

/* angular Global*/ ;
(function() {
  'use strict';
  angular.module('gitApi', ['ngRoute', 'ngResource', 'gitDerective', 'gitApiConfig', 'gitApiCtrl', 'gitFactory']);
  //controllers

  //directives

  // config
  angular.module('gitApi')
    .config(['$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/', {
            controller: 'SearchRepoCtrl'
          })
          .when('/:org/:repo/issues/', {
            // controller: 'NavigateCtrl',
            templateUrl: 'template/nav.html'
          })
          .when('/:org/:repo/issues/:number', {
            // controller: 'CommentsCtrl',
            templateUrl: 'template/nav.html'
          })
          .otherwise({
            temlpate: '<h1> NO page here<h1>'
          });
      }
    ]);
  // factory
})();
// curl https: //api.github.com/repos/codeception/codeception/issues\?page\=5

//# sourceMappingURL=data:application/json;base64,
;
(function() {
  'use strict';
  // navigation controller
  angular.module('gitApiCtrl', ['gitFactory'])
    .controller('NavigateCtrl', ["$scope", "getListIssues", "$routeParams", function($scope, getListIssues, $routeParams) {
      getListIssues.query($routeParams.org, $routeParams.repo).then(function(data) {
        $scope.issues = angular.copy(data);
      });
      $scope.issuesItem = function() {
        $scope.number = $routeParams.number;
        $scope.org = $routeParams.org;
        $scope.repo = $routeParams.repo;
        var issue = $scope.issues.filter(function(item) {
          return item.number == $scope.number;
        });
        if (!issue.length) return;
        $scope.issue = issue[0];
      };
    }])

  // repo and org controller search
  .controller('SearchRepoCtrl', ["$scope", "$location", "getListIssues", function($scope, $location, getListIssues) {
    if ($location.$$path === '') {
      $scope.startPage = true;
    }
    $scope.searchRepo = function() {
      getListIssues.query($scope.org, $scope.repo).then(function(data) {
        $scope.data = angular.copy(data);
      });
      $scope.startPage = false;
      $location.path('/' + $scope.org + '/' + $scope.repo + '/issues');
    };
  }])

  //show comments controller
  .controller('CommentsCtrl', ["getListComments", "$scope", "$routeParams", function(getListComments, $scope, $routeParams) {
    if ($routeParams.number !== undefined) {
      getListComments.query($routeParams.org, $routeParams.repo, $routeParams.number).then(function(data) {
        $scope.comments = angular.copy(data);
        console.log('if work 1', $scope.issues);
        var issue = $scope.issues.filter(function(item) {
          return item.number == $routeParams.number;
        });
        // console.log('if work', $scope);

        if (!issue.length) return;
        $scope.issue = issue[0];
        console.log('if work', $scope.issue);
      });
      console.log('if work 2', $scope.issues);

    }
  }]);
})();

;
(function() {
  'use strict';
  // directive  show  1 issue
  angular.module('gitDerective', ['gitApiCtrl'])
    .directive('issues', function() {
      return {
        controller: 'NavigateCtrl',
        restrict: 'E',
        templateUrl: 'template/showIssues.html'
      };
    })
    // directive show all comments
    .directive('comments', function() {
      return {
        controller: 'CommentsCtrl',
        restrict: 'E',
        templateUrl: 'template/comments.html'
      };
    })
    .directive('pages', function() {
      // Runs during compile
      return {
        // name: '',
        // priority: 1,
        // terminal: true,
        // scope: {}, // {} = isolate, true = child, false/undefined = no change
        // controller: function($scope, $element, $attrs, $transclude) {},
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        // template: '',
        templateUrl: 'templatte/pages.html'
          // replace: true,
          // transclude: true,
          // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
      };
    });
})();

;
(function() {
  'use strict';
  angular.module('gitFactory', [])
    .factory('getListIssues', ["$http", function($http) {
      return {
        query: function(org, repo) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }])
    // factory get comments list from git hub
    .factory('getListComments', ["$http", function($http) {
      return {
        query: function(org, repo, number) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues' + '/' + number + '/' + 'comments';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }]);
})();

/* angular Global*/ ;
(function() {
  'use strict';
  angular.module('gitApi', ['ngRoute', 'ngResource', 'gitDerective', 'gitApiConfig', 'gitApiCtrl', 'gitFactory'])
    //controllers

  //directives

  // config

  .config(['$routeProvider',
    function($routeProvider) {
      $routeProvider
        .when('/', {
          controller: 'SearchRepoCtrl'
        })
        .when('/:org/:repo/issues/', {
          // controller: 'NavigateCtrl',
          templateUrl: 'template/nav.html'
        })
        .when('/:org/:repo/issues/:number', {
          // controller: 'CommentsCtrl',
          templateUrl: 'template/nav.html'
        })
        .otherwise({
          temlpate: '<h1> NO page here<h1>'
        });
    }
  ]);
  // factory
})();
// curl https: //api.github.com/repos/codeception/codeception/issues\?page\=5

//# sourceMappingURL=data:application/json;base64,
;
(function() {
  'use strict';
  // navigation controller
  angular.module('gitApiCtrl', ['gitFactory'])
    .controller('NavigateCtrl', ["$scope", "getListIssues", "$routeParams", function($scope, getListIssues, $routeParams) {
      getListIssues.query($routeParams.org, $routeParams.repo).then(function(data) {
        $scope.issues = angular.copy(data);
      });
      $scope.issuesItem = function() {
        $scope.number = $routeParams.number;
        $scope.org = $routeParams.org;
        $scope.repo = $routeParams.repo;
        var issue = $scope.issues.filter(function(item) {
          return item.number == $scope.number;
        });
        if (!issue.length) return;
        $scope.issue = issue[0];
      };
    }])

  // repo and org controller search
  .controller('SearchRepoCtrl', ["$scope", "$location", "getListIssues", function($scope, $location, getListIssues) {
    if ($location.$$path === '') {
      $scope.startPage = true;
    }
    $scope.searchRepo = function() {
      getListIssues.query($scope.org, $scope.repo).then(function(data) {
        $scope.data = angular.copy(data);
      });
      $scope.startPage = false;
      $location.path('/' + $scope.org + '/' + $scope.repo + '/issues');
    };
  }])

  //show comments controller
  .controller('CommentsCtrl', ["getListComments", "$scope", "$routeParams", function(getListComments, $scope, $routeParams) {
    if ($routeParams.number !== undefined) {
      getListComments.query($routeParams.org, $routeParams.repo, $routeParams.number).then(function(data) {
        $scope.comments = angular.copy(data);
        console.log('if work 1', $scope.issues);
        var issue = $scope.issues.filter(function(item) {
          return item.number == $routeParams.number;
        });
        // console.log('if work', $scope);

        if (!issue.length) return;
        $scope.issue = issue[0];
        console.log('if work', $scope.issue);
      });
      console.log('if work 2', $scope.issues);

    }
  }]);
})();

;
(function() {
  'use strict';
  // directive  show  1 issue
  angular.module('gitDerective', ['gitApiCtrl'])
    .directive('issues', function() {
      return {
        controller: 'NavigateCtrl',
        restrict: 'E',
        templateUrl: 'template/showIssues.html'
      };
    })
    // directive show all comments
    .directive('comments', function() {
      return {
        controller: 'CommentsCtrl',
        restrict: 'E',
        templateUrl: 'template/comments.html'
      };
    })
    .directive('pages', function() {
      // Runs during compile
      return {
        // name: '',
        // priority: 1,
        // terminal: true,
        // scope: {}, // {} = isolate, true = child, false/undefined = no change
        // controller: function($scope, $element, $attrs, $transclude) {},
        // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        // template: '',
        templateUrl: 'templatte/pages.html'
          // replace: true,
          // transclude: true,
          // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
      };
    });
})();

;
(function() {
  'use strict';
  angular.module('gitFactory', [])
    .factory('getListIssues', ["$http", function($http) {
      return {
        query: function(org, repo) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }])
    // factory get comments list from git hub
    .factory('getListComments', ["$http", function($http) {
      return {
        query: function(org, repo, number) {
          var url = 'https://api.github.com/repos/' + org + '/' + repo + '/issues' + '/' + number + '/' + 'comments';
          return $http.get(url).then(function(res) {
            var list = angular.copy(res.data);
            return list;
          });
        }
      };
    }]);
})();

/* angular Global*/ ;
(function() {
  'use strict';
  angular.module('gitApi', ['ngRoute', 'gitDerective', 'gitApiCtrl', 'gitFactory']);
  //controllers

  //directives

  // config
  angular.module('gitApi')
    .config(['$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/', {
            controller: 'SearchRepoCtrl'
          })
          .when('/:org/:repo/issues/', {
            // controller: 'NavigateCtrl',
            templateUrl: 'template/nav.html'
          })
          .when('/:org/:repo/issues/:number', {
            // controller: 'CommentsCtrl',
            templateUrl: 'template/nav.html'
          })
          .otherwise({
            temlpate: '<h1> NO page here<h1>'
          });
      }
    ]);
  // factory
})();
// curl https: //api.github.com/repos/codeception/codeception/issues\?page\=5

//# sourceMappingURL=data:application/json;base64,
!function(){"use strict";angular.module("gitApiCtrl",["gitFactory"]).controller("NavigateCtrl",["$scope","getListIssues","$routeParams",function(e,t,r){t.query(r.org,r.repo).then(function(t){e.issues=angular.copy(t)}),e.issuesItem=function(){e.number=r.number,e.org=r.org,e.repo=r.repo;var t=e.issues.filter(function(t){return t.number==e.number});t.length&&(e.issue=t[0])}}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(e,t,r){e.searchRepo=function(){r.query(e.org,e.repo).then(function(t){e.issues=angular.copy(t)}),t.path("/"+e.org+"/"+e.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(e,t,r){void 0!==r.number&&e.query(r.org,r.repo,r.number).then(function(e){t.comments=angular.copy(e),console.log("if work 1",t.issues);var s=t.issues.filter(function(e){return e.number==r.number});s.length&&(t.issue=s[0])})}]).controller("PageCtrl",["getListIssues","$scope","$routeParams",function(e,t,r){t.issuesList={},t.page=1,t.previosPage=function(){1!==t.page&&(t.page--,t.issuesList[t.page]=t.page,console.log(t.issuesList))},t.nextPage=function(){t.page++,t.issuesList[t.page]=t.page,console.log(t.issuesList),e.queryPage(r.org,r.repo,t.page).then(function(e){t.issuesList[t.page]=angular.copy(e),console.log(t.issuesList)})}}])}(),function(){"use strict";angular.module("gitDerective",["gitApiCtrl"]).directive("issues",function(){return{controller:"NavigateCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}}).directive("search",function(){return{controller:"SearchRepoCtrl",restrict:"E",templateUrl:"template/search.html"}}).directive("pages",function(){return{controller:"PageCtrl",restrict:"E",templateUrl:"template/pages.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http",function(e){return{issues:[],query:function(e,t){return queryPage(e,t,1)},queryPage:function(t,r,s){var n=this;if(this.issues[s])return $q(function(e){e(n.issues[s])});var o="https://api.github.com/repos/"+t+"/"+r+"/issues/?page="+s;return e.get(o).then(function(e){var t=angular.copy(e.data);return n.issues[s]=t})}}}]).factory("getListComments",["$http",function(e){return{query:function(t,r,s){var n="https://api.github.com/repos/"+t+"/"+r+"/issues/"+s+"/comments";return e.get(n).then(function(e){var t=angular.copy(e.data);return t})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","gitDerective","gitApiCtrl","gitFactory"]),angular.module("gitApi").config(["$routeProvider",function(e){e.when("/",{templateUrl:"template/search.html",controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{templateUrl:"template/nav.html"})}])}(),function(){"use strict";angular.module("gitApiCtrl",["gitFactory"]).controller("ListIessuesCtrl",["$scope","getListIssues","$routeParams",function(e,t,r){e.org=r.org,e.repo=r.repo,e.issues,t.query(r.org,r.repo).then(function(t){e.issues=angular.copy(t)})}]).controller("IssueCtrl",["$scope","getListIssues","$routeParams",function(e,t,r){e.org=r.org,e.repo=r.repo,e.number=r.number,console.log(e),t.query(r.org,r.repo).then(function(t){e.issues=angular.copy(t);var r=e.issues.filter(function(t){return t.number==e.number});r.length&&(e.issue=r[0])})}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(e,t,r){e.searchRepo=function(){r.query(e.org,e.repo).then(function(t){e.issues=angular.copy(t)}),t.path("/"+e.org+"/"+e.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(e,t,r){void 0!==r.number&&e.query(r.org,r.repo,r.number).then(function(e){t.comments=angular.copy(e)})}]).controller("PageCtrl",["getListIssues","$scope","$routeParams",function(e,t,r){t.issuesList={},t.page=1,t.previosPage=function(){1!==t.page&&(t.page--,t.issues=t.issuesList[t.page],console.log(t.issuesList))},t.nextPage=function(){t.page++,console.log(t.issuesList),e.queryPage(r.org,r.repo,t.page).then(function(e){t.issuesList[t.page]=angular.copy(e),t.issues=t.issuesList[t.page]})}}])}(),function(){"use strict";angular.module("gitDerective",["gitApiCtrl"]).directive("issues",function(){return{controller:"IssueCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}}).directive("search",function(){return{controller:"SearchRepoCtrl",restrict:"E",templateUrl:"template/search.html"}}).directive("pages",function(){return{controller:"PageCtrl",restrict:"E",templateUrl:"template/pages.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http","$q",function(e,t){return{issues:[],query:function(e,t){return this.queryPage(e,t,1)},queryPage:function(r,s,n){var o=this;if(this.issues[n])return t(function(e){e(o.issues[n])});var u="https://api.github.com/repos/"+r+"/"+s+"/issues?page="+n;return e.get(u).then(function(e){var t=angular.copy(e.data);return o.issues[n]=t})}}}]).factory("getListComments",["$http",function(e){return{query:function(t,r,s){var n="https://api.github.com/repos/"+t+"/"+r+"/issues/"+s+"/comments";return e.get(n).then(function(e){var t=angular.copy(e.data);return t})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","gitDerective","gitApiCtrl","gitFactory"]),angular.module("gitApi").config(["$routeProvider",function(e){e.when("/",{templateUrl:"template/search.html",controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{controller:"ListIessuesCtrl",templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{controller:"IssueCtrl",templateUrl:"template/nav.html"}).otherwise({temlpate:"<h1> NO page here<h1>"})}])}(),function(){"use strict";angular.module("gitApiCtrl",["gitFactory"]).controller("ListIessuesCtrl",["$scope","getListIssues","$routeParams",function(e,t,r){e.org=r.org,e.repo=r.repo,e.issues,t.query(r.org,r.repo).then(function(t){if(e.issues=angular.copy(t),r.number){e.number=r.number;var s=e.issues.filter(function(t){return t.number==e.number});if(!s.length)return;e.issue=s[0]}})}]).controller("SearchRepoCtrl",["$scope","$location","getListIssues",function(e,t,r){e.searchRepo=function(){r.query(e.org,e.repo).then(function(t){e.issues=angular.copy(t)}),t.path("/"+e.org+"/"+e.repo+"/issues")}}]).controller("CommentsCtrl",["getListComments","$scope","$routeParams",function(e,t,r){void 0!==r.number&&e.query(r.org,r.repo,r.number).then(function(e){t.comments=angular.copy(e)})}]).controller("PageCtrl",["getListIssues","$scope","$routeParams",function(e,t,r){t.issuesList={},t.page=1,t.previosPage=function(){1!==t.page&&(t.page--,t.issues=t.issuesList[t.page],console.log(t.issuesList))},t.nextPage=function(){t.page++,console.log(t.issuesList),e.queryPage(r.org,r.repo,t.page).then(function(e){t.issuesList[t.page]=angular.copy(e),t.issues=t.issuesList[t.page]})}}])}(),function(){"use strict";angular.module("gitDerective",["gitApiCtrl"]).directive("issues",function(){return{controller:"ListIessuesCtrl",restrict:"E",templateUrl:"template/showIssues.html"}}).directive("comments",function(){return{controller:"CommentsCtrl",restrict:"E",templateUrl:"template/comments.html"}}).directive("search",function(){return{controller:"SearchRepoCtrl",restrict:"E",templateUrl:"template/search.html"}}).directive("pages",function(){return{controller:"PageCtrl",restrict:"E",templateUrl:"template/pages.html"}})}(),function(){"use strict";angular.module("gitFactory",[]).factory("getListIssues",["$http","$q",function(e,t){return{issues:[],query:function(e,t){return this.queryPage(e,t,1)},queryPage:function(r,s,n){var o=this;if(this.issues[n])return t(function(e){e(o.issues[n])});var u="https://api.github.com/repos/"+r+"/"+s+"/issues?page="+n;return e.get(u).then(function(e){var t=angular.copy(e.data);return o.issues[n]=t})}}}]).factory("getListComments",["$http",function(e){return{query:function(t,r,s){var n="https://api.github.com/repos/"+t+"/"+r+"/issues/"+s+"/comments";return e.get(n).then(function(e){var t=angular.copy(e.data);return t})}}}])}(),function(){"use strict";angular.module("gitApi",["ngRoute","gitDerective","gitApiCtrl","gitFactory"]),angular.module("gitApi").config(["$routeProvider",function(e){e.when("/",{templateUrl:"template/search.html",controller:"SearchRepoCtrl"}).when("/:org/:repo/issues/",{controller:"ListIessuesCtrl",templateUrl:"template/nav.html"}).when("/:org/:repo/issues/:number",{templateUrl:"template/nav.html"}).otherwise({temlpate:"<h1> NO page here<h1>"})}])}();
//# sourceMappingURL=data:application/json;base64,